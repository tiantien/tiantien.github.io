(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{318:function(s,e,a){"use strict";a.r(e);var t=a(5),n=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[s._v("#")]),s._v(" Service")]),s._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),e("p",[s._v("Kubernetes 中 Pod 是随时可以消亡的（节点故障、容器内应用程序错误等原因）。如果使用 "),e("a",{attrs:{href:"https://kuboard.cn/learning/k8s-intermediate/service/learning/k8s-intermediate/workload/wl-deployment/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Deployment"),e("OutboundLink")],1),s._v(" 运行您的应用程序，Deployment 将会在 Pod 消亡后再创建一个新的 Pod 以维持所需要的副本数。每一个 Pod 有自己的 IP 地址，然而，对于 Deployment 而言，对应 Pod 集合是动态变化的。")]),s._v(" "),e("p",[s._v("这个现象导致了如下问题：")]),s._v(" "),e("p",[s._v("如果某些 Pod（假设是 'backends'）为另外一些 Pod（假设是 'frontends'）提供接口，在 'backends' 中的 Pod 集合不断变化（IP 地址也跟着变化）的情况下，'frontends' 中的 Pod 如何才能知道应该将请求发送到哪个 IP 地址？")]),s._v(" "),e("p",[s._v("Service 存在的意义，就是为了解决这个问题。")]),s._v(" "),e("p",[s._v("Kubernetes 中 Service 是一个 API 对象。")]),s._v(" "),e("p",[s._v("Service 是 Kubernetes 中的一种服务发现机制：")]),s._v(" "),e("ul",[e("li",[s._v("Pod 有自己的 IP 地址")]),s._v(" "),e("li",[s._v("Service 被赋予一个唯一的 dns name")]),s._v(" "),e("li",[s._v("Service 通过 label selector 选定一组 Pod")]),s._v(" "),e("li",[s._v("Service 实现负载均衡，可将请求均衡分发到选定这一组 Pod 中")])]),s._v(" "),e("h2",{attrs:{id:"创建-service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-service"}},[s._v("#")]),s._v(" 创建 Service")]),s._v(" "),e("p",[s._v("定义一个yaml文件saber-service.yaml")]),s._v(" "),e("div",{staticClass:"language-yaml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Service\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" saber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("service   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Service 的名称")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Service 自己的标签")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("app")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" saber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("web  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#为该 Service 设置 key 为 app，value 为 nginx 的标签")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#这是关于该 Service 的定义，描述了 Service 如何选择 Pod，如何被访问")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("selector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("         "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#标签选择器")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("app")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" saber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("web  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#选择包含标签 app:nginx 的 Pod")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" saber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("port    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#端口的名字")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("protocol")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" TCP           "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#协议类型 TCP/UDP")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#集群内的其他容器组可通过 80 端口访问 Service")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#nodePort: 32701   #通过任意节点的 32600 端口访问 Service")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("targetPort")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#将请求转发到匹配 Pod 的 80 端口")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" LoadBalancer       "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Serive的类型，ClusterIP/NodePort/LoaderBalancer")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 执行yaml文件内容，创建service")]),s._v("\nkubectl apply -f saber-service.yaml\nservice/saber-service created\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"查看service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看service"}},[s._v("#")]),s._v(" 查看Service")]),s._v(" "),e("div",{staticClass:"language-shell line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 查看Service")]),s._v("\nkubectl get svc\nNAME            TYPE           CLUSTER-IP      EXTERNAL-IP   PORT"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("S"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        AGE\nsaber-service   LoadBalancer   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.106")]),s._v(".45.206   "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("pending"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":31117/TCP   24s\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 查看Service详情")]),s._v("\nkubectl describe svc saber-service\nName:                     saber-service\nNamespace:                bladex-dev\nLabels:                   "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("app")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("saber-web\nAnnotations:              "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("none"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\nSelector:                 "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("app")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("saber-web\nType:                     LoadBalancer\nIP Family Policy:         SingleStack\nIP Families:              IPv4\nIP:                       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.106")]),s._v(".45.206\nIPs:                      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.106")]),s._v(".45.206\nPort:                     saber-port  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/TCP\nTargetPort:               "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("/TCP\nNodePort:                 saber-port  "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("31117")]),s._v("/TCP\nEndpoints:                "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("100.85")]),s._v(".172.212:80\nSession Affinity:         None\nExternal Traffic Policy:  Cluster\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("h2",{attrs:{id:"service-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-类型"}},[s._v("#")]),s._v(" Service 类型")]),s._v(" "),e("p",[s._v("Kubernetes 中可以通过不同方式发布 Service，通过 "),e("code",[s._v("ServiceType")]),s._v(" 字段指定，该字段的默认值是 "),e("code",[s._v("ClusterIP")]),s._v("，可选值有:")]),s._v(" "),e("ul",[e("li",[e("p",[e("strong",[s._v("ClusterIP")]),s._v(": 默认值。通过集群内部的一个 IP 地址暴露 Service，只在集群内部可以访问")])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("NodePort")]),s._v(":通过每一个节点上的的静态端口（NodePort）暴露 Service，同时自动创建 ClusterIP 类型的访问方式")]),s._v(" "),e("ul",[e("li",[s._v("在集群内部通过 $(ClusterIP): $(Port) 访问")]),s._v(" "),e("li",[s._v("在集群外部通过 $(NodeIP): $(NodePort) 访问")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("LoadBalancer")]),s._v(": 通过云服务供应商（AWS、Azure、GCE 等）的负载均衡器在集群外部暴露 Service，同时自动创建 NodePort 和 ClusterIP 类型的访问方式")]),s._v(" "),e("ul",[e("li",[s._v("在集群内部通过 $(ClusterIP): $(Port) 访问")]),s._v(" "),e("li",[s._v("在集群外部通过 $(NodeIP): $(NodePort) 访问")]),s._v(" "),e("li",[s._v("在集群外部通过 $(LoadBalancerIP): $(Port) 访问")])])]),s._v(" "),e("li",[e("p",[e("strong",[s._v("ExternalName")]),s._v(": 将 Service 映射到 "),e("code",[s._v("externalName")]),s._v(" 指定的地址（例如：foo.bar.example.com），返回值是一个 CNAME 记录。不使用任何代理机制。")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);